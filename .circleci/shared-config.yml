version: 2.1

# define the parameters from the setup config.
parameters:
  always-continue:
    type: boolean
    default: false
  pipeline-service1:
    type: boolean
    default: false
  pipeline-service2:
    type: boolean
    default: false

executors:
  temurin:
    docker:
      - image: ${CIRCLECI_EXECUTER_GCP_REGION}-docker.pkg.dev/${CIRCLECI_EXECUTER_GCP_PROJECT}/${CIRCLECI_EXECUTER_REPO_NAME}/maven:3.9.9-eclipse-temurin-21
        auth:
          username: _json_key
          password: ${CIRCLECI_EXECUTER_GSA_KEY}
  google-cloud-cli:
    docker:
      - image: gcr.io/google.com/cloudsdktool/google-cloud-cli:slim

commands:

  unit_test:
    steps:
      - run:
          name: Run tests
          command: mvn -f ./pom.xml clean verify

  scan_sbom:
    steps:
      - run:
          name: Install Syft
          command: curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
      - run:
          name: Make SBOM
          command: |
            syft scan . \
              --source-name $(basename $(pwd)) \
              --source-version $(echo $(git rev-parse --abbrev-ref HEAD))
      - run:
          name: Install Grype
          command: curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
      - run:
          name: Analyze SBOM
          command: grype sbom:./target/syft-sbom.json
  
  analyze_dependency:
    steps:
      - run:
          name: Analyze maven dependencies
          command: |
            mvn -f ./pom.xml dependency-check:check
  
  check_coding_bug:
    steps:
      - run:
          name: Check coding bugs
          command: mvn -f ./pom.xml spotbugs:check

  store_no_analyzed_reports:
    steps:
      - store_artifacts:
          path: ./target/syft-sbom.json
          destination: syft-sbom.json
      - store_artifacts:
          path: ./grype-scan-report.json
          destination: grype-scan-report.json

  store_analyzed_reports:
    steps:
      - store_artifacts:
          path: ./target/site/jacoco
          destination: jacoco
      - store_artifacts:
          path: ./target/dependency-check-report.json
          destination: dependency-check-report.json
      - store_artifacts:
          path: ./target/dependency-check-report.html
          destination: dependency-check-report.html
      - store_artifacts:
          path: ./target/spotbugsXml.xml
          destination: spotbugsXml.xml
      - store_artifacts:
          path: ./target/spotbugs.html
          destination: spotbugs.html

  sonarqube_result_push:
    steps:
      - run:
          name: Push result to SonarQube
          command: |
            mvn -f ./pom.xml sonar:sonar \
              -Dsonar.organization=${SONAR_ORGANIZATION} \
              -Dsonar.projectName=${SONAR_PROJECT_NAME}-<<pipeline.git.branch >> \
              -Dsonar.projectKey=${SONAR_PROJECT_KEY}-<<pipeline.git.branch >> \
              -Dsonar.host.url=${SONAR_HOST_URL} \
              -Dsonar.login=${SONAR_TOKEN}

  gcloud_setting:
    steps:
      - run:
          name: Authorize Google Cloud
          command: |
            echo ${SERVICE_GSA_KEY} | gcloud auth activate-service-account --key-file=-
            gcloud auth list
            gcloud config list
  image_tag_setting:
    steps:
      - run:
          name: Install xmllint Command
          command: |
            apt install -y libxml2-utils
      - run:
          name: Set Image Tag
          command: |
            IMAGE_TAG=$(xmllint --xpath "//*[local-name()='project']/*[local-name()='version']/text()" ./pom.xml)
            echo "export IMAGE_TAG=${IMAGE_TAG}" >> $BASH_ENV
  image_build:
    steps:
      - run:
          name: Image Build
          command: |
            echo "Image Tag: ${IMAGE_TAG}"
            docker build \
              --build-arg APP_ENV=${APP_ENV} \
              -t ${SERVICE_GCP_REGION}-docker.pkg.dev/${SERVICE_GCP_PROJECT}/${SERVICE_AR_REPO_NAME}/${SERVICE_NAME}:${IMAGE_TAG} .
  image_push:
    steps:
      - run:
          name: Configure Authentication
          command: gcloud auth configure-docker ${SERVICE_GCP_REGION}-docker.pkg.dev --quiet
      - run:
          name: Image Push
          command: |
            docker push ${SERVICE_GCP_REGION}-docker.pkg.dev/${SERVICE_GCP_PROJECT}/${SERVICE_AR_REPO_NAME}/${SERVICE_NAME}:${IMAGE_TAG}
  deploy:
    steps:
      - run:
          name: Set Configuration of Cloud Run Service
          command: |
            sed -i "s/<SERVICE_NAME>/${SERVICE_NAME}/g" ./deploy/service.yml
            sed -i "s/<SERVICE_GCP_REGION>/${SERVICE_GCP_REGION}/g" ./deploy/service.yml
            sed -i "s/<SERVICE_GCP_PROJECT>/${SERVICE_GCP_PROJECT}/g" ./deploy/service.yml
            sed -i "s/<SERVICE_AR_REPO_NAME>/${SERVICE_AR_REPO_NAME}/g" ./deploy/service.yml
            sed -i "s/<IMAGE_TAG>/${IMAGE_TAG}/g" ./deploy/service.yml
            cat ./deploy/service.yml
      - run:
          name: Deploy to Cloud Run
          command: |
            gcloud run services replace ./deploy/service.yml \
              --project=${SERVICE_GCP_PROJECT} \
              --region=${SERVICE_GCP_REGION} \
              --quiet
      - run:
          name: Allow Access to Cloud Run Service
          command: |
            gcloud run services set-iam-policy ${SERVICE_NAME} ./deploy/policy.yml \
              --project=${SERVICE_GCP_PROJECT} \
              --region=${SERVICE_GCP_REGION} \
              --quiet

# jobs: